// ConsoleApplication1.cpp: определяет точку входа для консольного приложения.
//
#include <Windows.h>
#include "stdafx.h"
#include <Windows.h>
#include <iostream>
#include "MemMan.h"
#include "csgo.hpp"
#include <thread>
#include "ConsoleApplication1.h"
//TODO: Change fov in scope, avoid first shoot not in scope and while running, change RCS (remove iShooted)
MemMan MemClass;

using namespace hazedumper::netvars;
using namespace hazedumper::signatures;
/*
	CAI_BaseNPC(DT_AI_BaseNPC):12 387
	CAK47(DT_WeaponAK47):1 517
	CBaseAnimating(DT_BaseAnimating):25 102
	CBaseAnimatingOverlay(DT_BaseAnimatingOverlay):2 208
	CBaseAttributableItem(DT_BaseAttributableItem):8 280
	CBaseButton(DT_BaseButton):1 55
	CBaseCombatCharacter(DT_BaseCombatCharacter):9 376
	CBaseCombatWeapon(DT_BaseCombatWeapon):14 505
	CBaseCSGrenade(DT_BaseCSGrenade):7 521
	CBaseCSGrenadeProjectile(DT_BaseCSGrenadeProjectile):6 112
	CBaseDoor(DT_BaseDoor):2 56
	CBaseEntity(DT_BaseEntity):44 52
	CBaseFlex(DT_BaseFlex):4 306
	CBaseGrenade(DT_BaseGrenade):8 107
	CBaseParticleEntity(DT_BaseParticleEntity):1 52
	CBasePlayer(DT_BasePlayer):43 567
	CBasePropDoor(DT_BasePropDoor):7 83
	CBaseTeamObjectiveResource(DT_BaseTeamObjectiveResource):29 721
	CBaseTempEntity(DT_BaseTempEntity):0 0
	CBaseToggle(DT_BaseToggle):4 55
	CBaseTrigger(DT_BaseTrigger):3 57
	CBaseViewModel(DT_BaseViewModel):14 14
	CBaseVPhysicsTrigger(DT_BaseVPhysicsTrigger):1 52
	CBaseWeaponWorldModel(DT_BaseWeaponWorldModel):5 5
	CBeam(DT_Beam):24 42
	CBeamSpotlight(DT_BeamSpotlight):9 60
	CBoneFollower(DT_BoneFollower):3 54
	CBRC4Target(DT_BRC4Target):3 104
	CBreachCharge(DT_WeaponBreachCharge):1 515
	CBreachChargeProjectile(DT_BreachChargeProjectile):5 111
	CBreakableProp(DT_BreakableProp):3 104
	CBreakableSurface(DT_BreakableSurface):10 316
	CBumpMine(DT_WeaponBumpMine):1 515
	CBumpMineProjectile(DT_BumpMineProjectile):4 110
	CC4(DT_WeaponC4):6 520
	CCascadeLight(DT_CascadeLight):7 7
	CChicken(DT_CChicken):3 111
	CColorCorrection(DT_ColorCorrection):12 12
	CColorCorrectionVolume(DT_ColorCorrectionVolume):2 2
	CCSGameRulesProxy(DT_CSGameRulesProxy):2 1119
	CCSPlayer(DT_CSPlayer):124 1731
	CCSPlayerResource(DT_CSPlayerResource):53 3368
	CCSRagdoll(DT_CSRagdoll):13 13
	CCSTeam(DT_CSTeam):1 16
	CDangerZone(DT_DangerZone):8 59
	CDangerZoneController(DT_DangerZoneController):9 105
	CDEagle(DT_WeaponDEagle):1 517
	CDecoyGrenade(DT_DecoyGrenade):1 521
	CDecoyProjectile(DT_DecoyProjectile):1 112
	CDrone(DT_Drone):10 86
	CDronegun(DT_Dronegun):5 106
	CDynamicLight(DT_DynamicLight):8 59
	CDynamicProp(DT_DynamicProp):6 109
	CEconEntity(DT_EconEntity):8 484
	CEconWearable(DT_WearableItem):1 484
	CEmbers(DT_Embers):5 56
	CEntityDissolve(DT_EntityDissolve):11 62
	CEntityFlame(DT_EntityFlame):3 54
	CEntityFreezing(DT_EntityFreezing):5 105
	CEntityParticleTrail(DT_EntityParticleTrail):4 57
	CEnvAmbientLight(DT_EnvAmbientLight):2 6
	CEnvDetailController(DT_DetailController):2 2
	CEnvDOFController(DT_EnvDOFController):8 59
	CEnvGasCanister(DT_EnvGasCanister):29 120
	CEnvParticleScript(DT_EnvParticleScript):2 103
	CEnvProjectedTexture(DT_EnvProjectedTexture):22 73
	CEnvQuadraticBeam(DT_QuadraticBeam):5 56
	CEnvScreenEffect(DT_EnvScreenEffect):3 54
	CEnvScreenOverlay(DT_EnvScreenOverlay):8 57
	CEnvTonemapController(DT_EnvTonemapController):14 65
	CEnvWind(DT_EnvWind):1 12
	CFEPlayerDecal(DT_FEPlayerDecal):16 194
	CFireCrackerBlast(DT_FireCrackerBlast):1 310
	CFireSmoke(DT_FireSmoke):7 58
	CFireTrail(DT_FireTrail):3 54
	CFish(DT_CFish):8 8
	CFists(DT_WeaponFists):2 516
	CFlashbang(DT_Flashbang):1 521
	CFogController(DT_FogController):18 18
	CFootstepControl(DT_FootstepControl):3 59
	CFunc_Dust(DT_Func_Dust):13 20
	CFunc_LOD(DT_Func_LOD):3 54
	CFuncAreaPortalWindow(DT_FuncAreaPortalWindow):5 56
	CFuncBrush(DT_FuncBrush):1 52
	CFuncConveyor(DT_FuncConveyor):2 53
	CFuncLadder(DT_FuncLadder):5 56
	CFuncMonitor(DT_FuncMonitor):1 52
	CFuncMoveLinear(DT_FuncMoveLinear):3 57
	CFuncOccluder(DT_FuncOccluder):2 2
	CFuncReflectiveGlass(DT_FuncReflectiveGlass):1 52
	CFuncRotating(DT_FuncRotating):9 54
	CFuncSmokeVolume(DT_FuncSmokeVolume):12 63
	CFuncTrackTrain(DT_FuncTrackTrain):1 52
	CGameRulesProxy(DT_GameRulesProxy):0 0
	CGrassBurn(DT_GrassBurn):2 53
	CHandleTest(DT_HandleTest):3 54
	CHEGrenade(DT_HEGrenade):1 521
	CHostage(DT_CHostage):21 252
	CHostageCarriableProp(DT_HostageCarriableProp):1 102
	CIncendiaryGrenade(DT_IncendiaryGrenade):1 521
	CInferno(DT_Inferno):7 310
	CInfoLadderDismount(DT_InfoLadderDismount):1 52
	CInfoMapRegion(DT_InfoMapRegion):3 54
	CInfoOverlayAccessor(DT_InfoOverlayAccessor):2 2
	CItem_Healthshot(DT_Item_Healthshot):1 516
	CItemCash(DT_ItemCash):1 484
	CItemDogtags(DT_ItemDogtags):3 486
	CKnife(DT_WeaponKnife):1 515
	CKnifeGG(DT_WeaponKnifeGG):1 515
	CLightGlow(DT_LightGlow):12 12
	CMaterialModifyControl(DT_MaterialModifyControl):13 64
	CMelee(DT_WeaponMelee):2 516
	CMolotovGrenade(DT_MolotovGrenade):1 521
	CMolotovProjectile(DT_MolotovProjectile):2 113
	CMovieDisplay(DT_MovieDisplay):12 63
	CParadropChopper(DT_ParadropChopper):9 100
	CParticleFire(DT_ParticleFire):2 2
	CParticlePerformanceMonitor(DT_ParticlePerformanceMonitor):3 54
	CParticleSystem(DT_ParticleSystem):15 145
	CPhysBox(DT_PhysBox):1 52
	CPhysBoxMultiplayer(DT_PhysBoxMultiplayer):3 54
	CPhysicsProp(DT_PhysicsProp):8 79
	CPhysicsPropMultiplayer(DT_PhysicsPropMultiplayer):5 83
	CPhysMagnet(DT_PhysMagnet):1 102
	CPhysPropAmmoBox(DT_PhysPropAmmoBox):1 83
	CPhysPropLootCrate(DT_PhysPropLootCrate):5 87
	CPhysPropRadarJammer(DT_PhysPropRadarJammer):1 83
	CPhysPropWeaponUpgrade(DT_PhysPropWeaponUpgrade):1 83
	CPlantedC4(DT_PlantedC4):9 110
	CPlasma(DT_Plasma):7 58
	CPlayerPing(DT_PlayerPing):4 55
	CPlayerResource(DT_PlayerResource):10 650
	CPointCamera(DT_PointCamera):10 61
	CPointCommentaryNode(DT_PointCommentaryNode):9 110
	CPointWorldText(DT_PointWorldText):4 55
	CPoseController(DT_PoseController):12 69
	CPostProcessController(DT_PostProcessController):3 64
	CPrecipitation(DT_Precipitation):2 53
	CPrecipitationBlocker(DT_PrecipitationBlocker):1 52
	CPredictedViewModel(DT_PredictedViewModel):1 14
	CProp_Hallucination(DT_Prop_Hallucination):4 105
	CPropCounter(DT_PropCounter):2 103
	CPropDoorRotating(DT_PropDoorRotating):1 83
	CPropJeep(DT_PropJeep):2 117
	CPropVehicleDriveable(DT_PropVehicleDriveable):15 116
	CRagdollManager(DT_RagdollManager):1 1
	CRagdollProp(DT_Ragdoll):8 107
	CRagdollPropAttached(DT_Ragdoll_Attached):5 111
	CRopeKeyframe(DT_RopeKeyframe):24 24
	CSCAR17(DT_WeaponSCAR17):1 517
	CSceneEntity(DT_SceneEntity):6 22
	CSensorGrenade(DT_SensorGrenade):1 521
	CSensorGrenadeProjectile(DT_SensorGrenadeProjectile):1 112
	CShadowControl(DT_ShadowControl):5 5
	CSlideshowDisplay(DT_SlideshowDisplay):9 75
	CSmokeGrenade(DT_SmokeGrenade):1 521
	CSmokeGrenadeProjectile(DT_SmokeGrenadeProjectile):3 114
	CSmokeStack(DT_SmokeStack):19 70
	CSnowball(DT_Snowball):1 521
	CSnowballPile(DT_SnowballPile):1 102
	CSnowballProjectile(DT_SnowballProjectile):1 112
	CSpatialEntity(DT_SpatialEntity):5 5
	CSpotlightEnd(DT_SpotlightEnd):3 54
	CSprite(DT_Sprite):12 63
	CSpriteOriented(DT_SpriteOriented):1 63
	CSpriteTrail(DT_SpriteTrail):9 71
	CStatueProp(DT_StatueProp):6 84
	CSteamJet(DT_SteamJet):12 63
	CSun(DT_Sun):10 10
	CSunlightShadowControl(DT_SunlightShadowControl):10 10
	CSurvivalSpawnChopper(DT_SurvivalSpawnChopper):8 99
	CTablet(DT_WeaponTablet):19 528
	CTeam(DT_Team):17 16
	CTeamplayRoundBasedRulesProxy(DT_TeamplayRoundBasedRulesProxy):2 106
	CTEArmorRicochet(DT_TEArmorRicochet):1 2
	CTEBaseBeam(DT_BaseBeam):15 15
	CTEBeamEntPoint(DT_TEBeamEntPoint):5 19
	CTEBeamEnts(DT_TEBeamEnts):3 17
	CTEBeamFollow(DT_TEBeamFollow):2 16
	CTEBeamLaser(DT_TEBeamLaser):3 17
	CTEBeamPoints(DT_TEBeamPoints):3 17
	CTEBeamRing(DT_TEBeamRing):3 17
	CTEBeamRingPoint(DT_TEBeamRingPoint):4 18
	CTEBeamSpline(DT_TEBeamSpline):3 2
	CTEBloodSprite(DT_TEBloodSprite):9 9
	CTEBloodStream(DT_TEBloodStream):7 9
	CTEBreakModel(DT_TEBreakModel):12 11
	CTEBSPDecal(DT_TEBSPDecal):4 3
	CTEBubbles(DT_TEBubbles):7 6
	CTEBubbleTrail(DT_TEBubbleTrail):7 6
	CTEClientProjectile(DT_TEClientProjectile):6 5
	CTEDecal(DT_TEDecal):6 5
	CTEDust(DT_TEDust):4 6
	CTEDynamicLight(DT_TEDynamicLight):9 8
	CTEEffectDispatch(DT_TEEffectDispatch):2 22
	CTEEnergySplash(DT_TEEnergySplash):3 3
	CTEExplosion(DT_TEExplosion):9 11
	CTEFireBullets(DT_TEFireBullets):12 12
	CTEFizz(DT_TEFizz):5 4
	CTEFootprintDecal(DT_TEFootprintDecal):6 5
	CTEFoundryHelpers(DT_TEFoundryHelpers):2 1
	CTEGaussExplosion(DT_TEGaussExplosion):3 5
	CTEGlowSprite(DT_TEGlowSprite):6 5
	CTEImpact(DT_TEImpact):4 3
	CTEKillPlayerAttachments(DT_TEKillPlayerAttachments):2 1
	CTELargeFunnel(DT_TELargeFunnel):3 5
	CTEMetalSparks(DT_TEMetalSparks):2 2
	CTEMuzzleFlash(DT_TEMuzzleFlash):5 4
	CTEParticleSystem(DT_TEParticleSystem):4 3
	CTEPhysicsProp(DT_TEPhysicsProp):11 10
	CTEPlantBomb(DT_TEPlantBomb):3 3
	CTEPlayerAnimEvent(DT_TEPlayerAnimEvent):3 3
	CTEPlayerDecal(DT_TEPlayerDecal):7 6
	CTEProjectedDecal(DT_TEProjectedDecal):5 4
	CTERadioIcon(DT_TERadioIcon):2 1
	CTEShatterSurface(DT_TEShatterSurface):15 14
	CTEShowLine(DT_TEShowLine):2 4
	CTesla(DT_Tesla):3 54
	CTESmoke(DT_TESmoke):5 4
	CTESparks(DT_TESparks):4 6
	CTESprite(DT_TESprite):5 4
	CTESpriteSpray(DT_TESpriteSpray):7 6
	CTest_ProxyToggle_Networkable(DT_ProxyToggle):2 53
	CTestTraceline(DT_TestTraceline):6 6
	CTEWorldDecal(DT_TEWorldDecal):3 2
	CTriggerPlayerMovement(DT_TriggerPlayerMovement):1 57
	CTriggerSoundOperator(DT_TriggerSoundOperator):2 58
	CVGuiScreen(DT_VGuiScreen):8 59
	CVoteController(DT_VoteController):6 61
	CWaterBullet(DT_WaterBullet):1 102
	CWaterLODControl(DT_WaterLODControl):2 2
	CWeaponAug(DT_WeaponAug):1 517
	CWeaponAWP(DT_WeaponAWP):1 517
	CWeaponBaseItem(DT_WeaponBaseItem):2 516
	CWeaponBizon(DT_WeaponBizon):1 517
	CWeaponCSBase(DT_WeaponCSBase):15 515
	CWeaponCSBaseGun(DT_WeaponCSBaseGun):3 517
	CWeaponCycler(DT_WeaponCycler):1 505
	CWeaponElite(DT_WeaponElite):1 517
	CWeaponFamas(DT_WeaponFamas):1 517
	CWeaponFiveSeven(DT_WeaponFiveSeven):1 517
	CWeaponG3SG1(DT_WeaponG3SG1):1 517
	CWeaponGalil(DT_WeaponGalil):1 517
	CWeaponGalilAR(DT_WeaponGalilAR):1 517
	CWeaponGlock(DT_WeaponGlock):1 517
	CWeaponHKP2000(DT_WeaponHKP2000):1 517
	CWeaponM249(DT_WeaponM249):1 517
	CWeaponM3(DT_WeaponM3):2 516
	CWeaponM4A1(DT_WeaponM4A1):1 517
	CWeaponMAC10(DT_WeaponMAC10):1 517
	CWeaponMag7(DT_WeaponMag7):1 517
	CWeaponMP5Navy(DT_WeaponMP5Navy):1 517
	CWeaponMP7(DT_WeaponMP7):1 517
	CWeaponMP9(DT_WeaponMP9):1 517
	CWeaponNegev(DT_WeaponNegev):1 517
	CWeaponNOVA(DT_WeaponNOVA):2 516
	CWeaponP228(DT_WeaponP228):1 517
	CWeaponP250(DT_WeaponP250):1 517
	CWeaponP90(DT_WeaponP90):1 517
	CWeaponSawedoff(DT_WeaponSawedoff):2 516
	CWeaponSCAR20(DT_WeaponSCAR20):1 517
	CWeaponScout(DT_WeaponScout):1 517
	CWeaponSG550(DT_WeaponSG550):1 517
	CWeaponSG552(DT_WeaponSG552):1 517
	CWeaponSG556(DT_WeaponSG556):1 517
	CWeaponShield(DT_WeaponShield):1 517
	CWeaponSSG08(DT_WeaponSSG08):1 517
	CWeaponTaser(DT_WeaponTaser):2 518
	CWeaponTec9(DT_WeaponTec9):1 517
	CWeaponTMP(DT_WeaponTMP):1 517
	CWeaponUMP45(DT_WeaponUMP45):1 517
	CWeaponUSP(DT_WeaponUSP):1 517
	CWeaponXM1014(DT_WeaponXM1014):2 516
	CWorld(DT_WORLD):11 62
	CWorldVguiText(DT_WorldVguiText):7 58
	DustTrail(DT_DustTrail):14 65
	MovieExplosion(DT_MovieExplosion):1 52
	ParticleSmokeGrenade(DT_ParticleSmokeGrenade):7 58
	RocketTrail(DT_RocketTrail):16 67
	SmokeTrail(DT_SmokeTrail):16 67
	SporeExplosion(DT_SporeExplosion):8 59
	SporeTrail(DT_SporeTrail):8 59



*/
using namespace std;
enum CSGO_Weapon_ID
{
	weapon_none,
	weapon_deagle,
	weapon_elite,
	weapon_fiveseven,
	weapon_glock,
	weapon_p228,
	weapon_usp,
	weapon_ak47,
	weapon_aug,
	weapon_awp,
	weapon_famas,
	weapon_g3sg1,
	weapon_galil,
	weapon_galilar,
	weapon_m249,
	weapon_m3,
	weapon_m4a1,
	weapon_mac10,
	weapon_mp5navy,
	weapon_p90,
	weapon_scout,
	weapon_sg550,
	weapon_sg552,
	weapon_tmp,
	weapon_ump45,
	weapon_xm1014,
	weapon_bizon,
	weapon_mag7,
	weapon_negev,
	weapon_sawedoff,
	weapon_tec9,
	weapon_taser,
	weapon_hkp2000,
	weapon_mp7,
	weapon_mp9,
	weapon_nova,
	weapon_p250,
	weapon_scar17,
	weapon_scar20,
	weapon_sg556,
	weapon_ssg08,
	weapon_knifegg,
	weapon_knife,
	weapon_flashbang,
	weapon_hegrenade,
	weapon_smokegrenade,
	weapon_molotov,
	weapon_decoy,
	weapon_incgrenade,
	weapon_c4
};
enum MoveType_t
{
	MOVETYPE_NONE = 0,	// never moves
	MOVETYPE_ISOMETRIC,			// For players -- in TF2 commander view, etc.
	MOVETYPE_WALK,				// Player only - moving on the ground
	MOVETYPE_STEP,				// gravity, special edge handling -- monsters use this
	MOVETYPE_FLY,				// No gravity, but still collides with stuff
	MOVETYPE_FLYGRAVITY,		// flies through the air + is affected by gravity
	MOVETYPE_VPHYSICS,			// uses VPHYSICS for simulation
	MOVETYPE_PUSH,				// no clip to world, push and crush
	MOVETYPE_NOCLIP,			// No gravity, no collisions, still do velocity/avelocity
	MOVETYPE_LADDER,			// Used by players only when going onto a ladder
	MOVETYPE_OBSERVER,			// Observer movement, depends on player's observer mode
	MOVETYPE_CUSTOM,			// Allows the entity to describe its own physics

	// should always be defined as the last item in the list
	MOVETYPE_LAST = MOVETYPE_CUSTOM,

	MOVETYPE_MAX_BITS = 4
};
enum LifeState {
	LIFE_ALIVE = 0,// alive
	LIFE_DYING = 1, // playing death animation or still falling off of a ledge waiting to hit ground
	LIFE_DEAD = 2 // dead. lying still.
};
struct variables
{
	ptrdiff_t m_nSurvivalTeam = 0xA3B0;
	int survivalTeam;
	int classidPlayer = 40;
	bool zone = false;
	bool firstShoot = true;
	int myTeam;
	uintptr_t localPlayer;
	uintptr_t gameModule;
	uintptr_t engineModule;
	uintptr_t glowObject;
	uintptr_t clientState;
	float closestAngle;
	uintptr_t closest;
	//vector<float> angles;
} val;

struct ClrRender
{
	BYTE red, green, blue;
};

struct VectorStr
{
	float x, y, z;
};
ClrRender clrEnemy;
ClrRender clrTeam;

struct GlowStruct
{
	uintptr_t* pEntity;
	float red;
	float green;
	float blue;
	float alpha;
	BYTE buffer[16];
	bool renderWhenOccluded;
	bool renderWhenUnOccluded;
	bool fullBloom;
	BYTE buffer1[5];
	int glowStyle;
};
typedef struct D3DXVECTOR3 {
	float x;
	float y;
	float z;
} D3DXVECTOR3;
typedef struct Vector {
	float x, y, z;
}Vector;

float VMatrix[16];

void GetMatrix() {
	for (int j = 0; j < 16; j++)
		VMatrix[j] = MemClass.readMem<float>(val.gameModule + dwViewMatrix + (j * 0x4));
}


//float VMatrix[4][4] = MemClass.readMem<float[16]>(val.clientState + dwViewMatrix);
//float m_fMatrix[4][4];
//ReadProcessMemory(gProcess.hProcess, (PBYTE*)(gProcess.dwClient + dwViewMatrix), &m_fMatrix, sizeof(m_fMatrix), NULL);
//ReadProcessMemory(gameModule, (DWORD*)(client + dwViewMatrix), &flMatrix, sizeof(flMatrix), 0);
//Memory::RPM(Memory::GetModule("client") + Offsets::CViewMatrix, &pMatrix, sizeof(pMatrix));

// Usage

//if (WorldToScreen(pEntity->EyePosition(), Screen, pMatrix))
//{
	// DrawPlayer
//}

void handleRcs()
{
	
	Vector OldAimPunch{ 0, 0, 0 };
	while (true)
	{
		bool doRcs = false;
		int weapon = MemClass.readMem<int>(val.localPlayer + m_hActiveWeapon);
		int weaponEnt = MemClass.readMem<int>(val.gameModule + dwEntityList + ((weapon & 0xFFF) - 1) * 0x10);
		int id = MemClass.readMem<int>(weaponEnt + m_iItemDefinitionIndex);
		
		
		int isShooting = MemClass.readMem<int>(val.gameModule + dwForceAttack);
		//int shotsFired = MemClass.readMem<int>(val.localPlayer + m_iShotsFired);
		//cout << id << endl;
		if (id == weapon_m4a1 or id == weapon_ak47 or id == weapon_famas or id == weapon_galil or id == weapon_galilar or id == weapon_ssg08 or id == weapon_ump45 or id == weapon_sg556 or id == weapon_aug)
		{
			doRcs = true;
		}

		if (isShooting == 5 and !GetAsyncKeyState(VK_RBUTTON) and doRcs)
		{

			Vector AimPunch = MemClass.readMem<Vector>(val.localPlayer + m_aimPunchAngle);


			AimPunch.x *= 2.f;
			AimPunch.y *= 2.f;
			AimPunch.z *= 2.f;

			Vector CurrentViewAngles = MemClass.readMem<Vector>(val.clientState + dwClientState_ViewAngles);

			Vector NewViewAngles;
			NewViewAngles.x = CurrentViewAngles.x + OldAimPunch.x - AimPunch.x;
			NewViewAngles.y = CurrentViewAngles.y + OldAimPunch.y - AimPunch.y;
			NewViewAngles.z = CurrentViewAngles.z + OldAimPunch.z - AimPunch.z;


			OldAimPunch = AimPunch;
			if (NewViewAngles.y > 180.0f)
			{
				NewViewAngles.y -= 360.0f;
			}
			else if (NewViewAngles.y < -180.0f)
			{
				NewViewAngles.y += 360.0f;
			}
			if (NewViewAngles.x > 180.0f)
			{
				NewViewAngles.x -= 360.0f;
			}
			else if (NewViewAngles.x < -180.0f)
			{
				NewViewAngles.x += 360.0f;
			}

			if (NewViewAngles.x >= 89.0f)
			{
				NewViewAngles.x = 89.0f;
			}
			else if (NewViewAngles.x <= -89.0f)
			{
				NewViewAngles.x = -89.0f;
			}

			MemClass.writeMem<Vector>(val.clientState + dwClientState_ViewAngles, NewViewAngles);

		}
		else
		{
			OldAimPunch.x = OldAimPunch.y = OldAimPunch.z = 0;

		}
		Sleep(1);
	}
}
D3DXVECTOR3 WorldToScreen_(D3DXVECTOR3 from)
{
	GetMatrix();
	float w = 0.0f;
	D3DXVECTOR3 ret;

	ret.x = VMatrix[0] * from.x + VMatrix[1] * from.y + VMatrix[2] * from.z + VMatrix[3];
	ret.y = VMatrix[4] * from.x + VMatrix[5] * from.y + VMatrix[6] * from.z + VMatrix[7];
	w = VMatrix[12] * from.x + VMatrix[13] * from.y + VMatrix[14] * from.z + VMatrix[15];

	if (w < 0.01f)
		return D3DXVECTOR3{ 0, 0, 0 };

	float invw = 1.0f / w;
	ret.x *= invw;
	ret.y *= invw;

	int width = GetSystemMetrics(SM_CXSCREEN);
	int height = GetSystemMetrics(SM_CYSCREEN);

	float x = width / 2;
	float y = height / 2;

	x += 0.5f * ret.x * width + 0.5f;
	y -= 0.5f * ret.y * height + 0.5f;

	ret.x = x;
	ret.y = y;
	ret.z = w;

	return ret;

}

/*void AimAtPos(float x, float y)
{
	bool smooth = false;
	float AimSpeed = 5;
	//By fredaikis
	float ScreenCenterX = (1920.0f / 2);
	float ScreenCenterY = (1080.0f / 2);
	float TargetX = 0;
	float TargetY = 0;
	if (x != 0)
	{
		if (x > ScreenCenterX)
		{
			TargetX = -(ScreenCenterX - x);
			TargetX /= AimSpeed;
			if (TargetX + ScreenCenterX > ScreenCenterX * 2) TargetX = 0;
		}

		if (x < ScreenCenterX)
		{
			TargetX = x - ScreenCenterX;
			TargetX /= AimSpeed;
			if (TargetX + ScreenCenterX < 0) TargetX = 0;
		}
	}
	if (y != 0)
	{
		if (y > ScreenCenterY)
		{
			TargetY = -(ScreenCenterY - y);
			TargetY /= AimSpeed;
			if (TargetY + ScreenCenterY > ScreenCenterY * 2) TargetY = 0;
		}

		if (y < ScreenCenterY)
		{
			TargetY = y - ScreenCenterY;
			TargetY /= AimSpeed;
			if (TargetY + ScreenCenterY < 0) TargetY = 0;
		}
	}
	if (!smooth)
	{
		mouse_event(0x0001, (unsigned int)(TargetX), (unsigned int)(TargetY), NULL, NULL);
		return;
	}
	TargetX /= 10;
	TargetY /= 10;
	if (abs(TargetX) < 1)
	{
		if (TargetX > 0)
		{
			TargetX = 1;
		}
		if (TargetX < 0)
		{
			TargetX = -1;
		}
	}
	if (abs(TargetY) < 1)
	{
		if (TargetY > 0)
		{
			TargetY = 1;
		}
		if (TargetY < 0)
		{
			TargetY = -1;
		}
	}
	mouse_event(0x0001, (unsigned int)TargetX, (unsigned int)TargetY, NULL, NULL);
}
void AimAtPos(float x, float y)
{
	//int ScreenCenterX = 960;
	//int ScreenCenterY = 540;

	int width = GetSystemMetrics(SM_CXSCREEN);
	int height = GetSystemMetrics(SM_CYSCREEN);
	int ScreenCenterY = height * 0.5f;
	int ScreenCenterX = width * 0.5f;
	bool smooth = false;
	float AimSpeed = 6;
	float TargetX = 0;
	float TargetY = 0;

	//X Axis
	if (x != 0)
	{
		if (x > ScreenCenterX)
		{
			TargetX = -(ScreenCenterX - x);
			TargetX /= AimSpeed;
			if (TargetX + ScreenCenterX > ScreenCenterX * 2) TargetX = 0;
		}

		if (x < ScreenCenterX)
		{
			TargetX = x - ScreenCenterX;
			TargetX /= AimSpeed;

			if (TargetX + ScreenCenterX < 0) TargetX = 0;
		}
	}

	//Y Axis

	if (y != 0)
	{
		if (y > ScreenCenterY)
		{
			TargetY = -(ScreenCenterY - y);
			TargetY /= AimSpeed;
			if (TargetY + ScreenCenterY > ScreenCenterY * 2) TargetY = 0;
		}

		if (y < ScreenCenterY)
		{
			TargetY = y - ScreenCenterY;
			TargetY /= AimSpeed;
			if (TargetY + ScreenCenterY < 0) TargetY = 0;
		}
	}

	if (!smooth)
	{
		mouse_event(MOUSEEVENTF_MOVE, (DWORD)(TargetX), (DWORD)(TargetY), NULL, NULL);
		return;
	}

	TargetX /= 10;
	TargetY /= 10;

	//Mouse even't will round to 0 a lot of the time, so we can add this, to make it more accurrate on slow speeds.
	if (fabs(TargetX) < 1)
	{
		if (TargetX > 0)
		{
			TargetX = 1;
		}
		if (TargetX < 0)
		{
			TargetX = -1;
		}
	}
	if (fabs(TargetY) < 1)
	{
		if (TargetY > 0)
		{
			TargetY = 1;
		}
		if (TargetY < 0)
		{
			TargetY = -1;
		}
	}
	mouse_event(MOUSEEVENTF_MOVE, TargetX, TargetY, NULL, NULL);
}*/


vector<float> calcAngle(vector<float> src, float dst[3])
{

	vector<float> angles = { 0 ,0 ,0 };


	double delta[3] = { (src[0] - dst[0]), (src[1] - dst[1]), (src[2] - dst[2]) };
	//cout << delta[2] << endl;
	// << src[2] << endl;
	//cout << dst[2] << endl;
	double hyp = sqrt(delta[0] * delta[0] + delta[1] * delta[1]);
	angles[0] = (float)(atan2f(delta[2], hyp) * 57.295779513082f);
	angles[1] = (float)(atanf(delta[1] / delta[0]) * 57.295779513082f);
	angles[2] = 0.0f;


	if (delta[0] >= 0.0) { angles[1] += 180.0f; }

	while (angles[0] > 180.0f)
	{
		angles[0] -= 360.0f;
	}
	while (angles[0] < -180.0f)
	{
		angles[0] += 360.0f;
	}
	while (angles[1] > 180.0f)
	{
		angles[1] -= 360.0f;
	}
	while (angles[1] < -180.0f)
	{
		angles[1] += 360.0f;
	}

	if (angles[0] >= 89.0f)
	{
		angles[0] = 89.0f;
	}
	else if (angles[0] <= -89.0f)
	{
		angles[0] = -89.0f;
	}

	return angles;
}
vector<float> getHeadPosition(uintptr_t entity)
{
	uintptr_t bones = MemClass.readMem<uintptr_t>(entity + m_dwBoneMatrix);
	float enemyHeadX = MemClass.readMem<float>(bones + 0x30 * 8 + 0x0C);
	float enemyHeadY = MemClass.readMem<float>(bones + 0x30 * 8 + 0x1C);
	float enemyHeadZ = MemClass.readMem<float>(bones + 0x30 * 8 + 0x2C);

	vector<float> enemyHeadPos = { enemyHeadX, enemyHeadY, enemyHeadZ };
	return enemyHeadPos;
	//cout << enemyHeadX << endl;
	//cout << enemyHeadY << endl;
	//cout << enemyHeadZ << endl;
}

int isPlayer(uintptr_t entity)
{
	int one = MemClass.readMem<int>(entity + 0x8); //IClientNetworkable vtable
	int two = MemClass.readMem<int>(one + 2 * 0x4); //3rd function in the vtable (GetClientClass)
	int three = MemClass.readMem<int>(two + 0x1); //pointer to the ClientClass struct out of the mov eax
	int classid = MemClass.readMem<int>(three + 0x14); //classid
	//cout << classid << endl;
	return classid;
}
void findClosest()
{
	for (short int i = 0; i <= 64; i++)
	{
		
		uintptr_t entity = MemClass.readMem<uintptr_t>(val.gameModule + dwEntityList + i * 0x10);
		if (val.zone)
		{
			if (isPlayer(entity)==val.classidPlayer)
			{
				
				bool dormant = MemClass.readMem<bool>(entity + m_bDormant);
				int health = MemClass.readMem<int>(entity + m_iHealth);
				if (!dormant && health > 0)
				{

					int entityTeamSurvival = MemClass.readMem<int>(entity + val.m_nSurvivalTeam);
					if (entityTeamSurvival != val.survivalTeam)
					{

						
						vector<float> enemyPos = getHeadPosition(entity);

						
						D3DXVECTOR3 from{ enemyPos[0] ,  enemyPos[1] ,  enemyPos[2] };
						D3DXVECTOR3 ret = WorldToScreen_(from);
						if (ret.x < 0.f or ret.x > 1920.f or ret.y < 0.f or ret.y > 1080.f )
						{
							
							continue;
						}
						float xdif = ret.x - GetSystemMetrics(SM_CXSCREEN) / 2;
						float ydif = ret.y - GetSystemMetrics(SM_CYSCREEN) / 2;
						float hyp = sqrt(xdif * xdif + ydif * ydif);
						bool scoped = MemClass.readMem<bool>(val.localPlayer + m_bIsScoped);
						float max = 0.f;
						if (scoped)
						{
							max = 200.f;
						}
						else
						{
							max = 55.f;
						}
						


						if (hyp < val.closestAngle and hyp <= max)
						{
							
							val.closest = entity;

							val.closestAngle = hyp;
						}


					}

				}
			}
		}
		else{

			bool dormant = MemClass.readMem<bool>(entity + m_bDormant);
			int health = MemClass.readMem<int>(entity + m_iHealth);
			if (!dormant && health > 0)
			{

				int entityTeam = MemClass.readMem<int>(entity + m_iTeamNum);
				if (val.myTeam != entityTeam)
				{

					//VectorStr vecOrigin = MemClass.readMem<VectorStr>(val.localPlayer + m_vecOrigin);
					//VectorStr vecOffset = MemClass.readMem<VectorStr>(val.localPlayer + m_vecViewOffset);
					//vector<float> vec{ vecOrigin.x + vecOffset.x, vecOrigin.y + vecOffset.y, vecOrigin.z + vecOffset.z };
					vector<float> enemyPos = getHeadPosition(entity);

					//float enemyPosArr[3] = { enemyPos[0], enemyPos[1], enemyPos[2] };
					//vector<float> angles = calcAngle(vec, enemyPosArr);
					//VectorStr playerAngles = MemClass.readMem<VectorStr>(val.clientState + dwClientState_ViewAngles);
					D3DXVECTOR3 from{ enemyPos[0] ,  enemyPos[1] ,  enemyPos[2] };
					D3DXVECTOR3 ret = WorldToScreen_(from);
					float xdif = ret.x - GetSystemMetrics(SM_CXSCREEN) / 2;
					float ydif = ret.y - GetSystemMetrics(SM_CYSCREEN) / 2;
					float hyp = sqrt(xdif * xdif + ydif * ydif);
					bool scoped = MemClass.readMem<bool>(val.localPlayer + m_bIsScoped);
					float max = 0.f;
					if (scoped)
					{
						max = 200.f;
					}
					else
					{
						 max = 55.f;
					}
					


					if (hyp < val.closestAngle and hyp <= max)
					{
							
						val.closest = entity;

						val.closestAngle = hyp;
					}


				}

			}
		}

	}
}
void aimAt(uintptr_t entity)
{
	
	
	int health = MemClass.readMem<int>(entity + m_iHealth);

	//if (!isPlayer(entity))
	//{
		//return;
	//}

	int one = MemClass.readMem<int>(entity + 0x8); //IClientNetworkable vtable
	int two = MemClass.readMem<int>(one + 2 * 0x4); //3rd function in the vtable (GetClientClass)
	int three = MemClass.readMem<int>(two + 0x1); //pointer to the ClientClass struct out of the mov eax
	int classid = MemClass.readMem<int>(three + 0x14); //classid
	//cout << classid << endl;
	if (entity != 0 && health > 0)
	{
		//cout << isPlayer(entity) << endl;
		VectorStr vecOrigin = MemClass.readMem<VectorStr>(val.localPlayer + m_vecOrigin);
		VectorStr vecOffset = MemClass.readMem<VectorStr>(val.localPlayer + m_vecViewOffset);
		vector<float> vec{ vecOrigin.x + vecOffset.x, vecOrigin.y + vecOffset.y, vecOrigin.z + vecOffset.z };

		vector<float> enemyPos = getHeadPosition(entity);
		float enemyPosArr[3] = { enemyPos[0], enemyPos[1], enemyPos[2] };
		vector<float> angles = calcAngle(vec, enemyPosArr);
		VectorStr anglesStr;






		if (angles[0] > 180.0f)
		{
			angles[0] -= 360.0f;
		}
		else if (angles[0] < -180.0f)
		{
			angles[0] += 360.0f;
		}
		if (angles[1] > 180.0f)
		{
			angles[1] -= 360.0f;
		}
		else if (angles[1] < -180.0f)
		{
			angles[1] += 360.0f;
		}

		if (angles[0] >= 89.0f)
		{
			angles[0] = 89.0f;
		}
		else if (angles[0] <= -89.0f)
		{
			angles[0] = -89.0f;
		}
		if (!isnan(angles[0]) && !isnan(angles[1]))
		{

			anglesStr.x = angles[0]; //y
			anglesStr.y = angles[1]; //x
			anglesStr.z = 0.0f;
			MemClass.writeMem<VectorStr>(val.clientState + dwClientState_ViewAngles, anglesStr);

		}
		//cout << "0:" << endl;


	}
	else
	{
		//val.checkAlive = true;
	}

	//Sleep(1);



}
bool isCross()
{
	int id = MemClass.readMem<int>(val.localPlayer + m_iCrosshairId);
	if (val.zone)
	{
		if (id > 0 and id <= 64)
		{
			uintptr_t entity = MemClass.readMem<uintptr_t>(val.gameModule + dwEntityList + (id - 1) * 0x10);
			bool dormant = MemClass.readMem<bool>(entity + m_bDormant);
			int health = MemClass.readMem<int>(entity + m_iHealth);
			int entityTeamSurvival = MemClass.readMem<int>(entity + val.m_nSurvivalTeam);

			if (!dormant and health > 0 and entityTeamSurvival != val.survivalTeam and isPlayer(entity))
			{
				cout << entityTeamSurvival << endl;
				val.closest = entity;
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		if (id > 0 and id <= 64)
		{
			uintptr_t entity = MemClass.readMem<uintptr_t>(val.gameModule + dwEntityList + (id - 1) * 0x10);
			bool dormant = MemClass.readMem<bool>(entity + m_bDormant);
			int health = MemClass.readMem<int>(entity + m_iHealth);
			int entityTeam = MemClass.readMem<int>(entity + m_iTeamNum);

			if (!dormant and health > 0 and (val.myTeam != entityTeam))
			{
				val.closest = entity;
				
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	

	


}
void LeftClick()
{
	INPUT    Input = { 0 };
	// left down 
	Input.type = INPUT_MOUSE;
	Input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
	::SendInput(1, &Input, sizeof(INPUT));

	// left up
	::ZeroMemory(&Input, sizeof(INPUT));
	Input.type = INPUT_MOUSE;
	Input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
	::SendInput(1, &Input, sizeof(INPUT));
}
void handleAim()
{
	int ticks = -1;
	int fired = 0;
	while (true)
	{
		bool isSniper = false;
		bool scoped = MemClass.readMem<bool>(val.localPlayer + m_bIsScoped);
		if (scoped)
		{
			if (ticks == -1)
			{
				ticks = GetTickCount();
			}

		}
		else {
			ticks = -1;
		}

		if (GetAsyncKeyState(VK_RBUTTON))
		{
			
			//cout << "press" << endl;
			//if (val.checkAlive)
			//{
			//cout << ticks << endl;

			if (isCross())
			{
			int delta = GetTickCount() - ticks;
			if (ticks == -1)
			{
				delta = 0;
			}
			
				//bool moveCorrect = false;
				int weapon = MemClass.readMem<int>(val.localPlayer + m_hActiveWeapon);
				int weaponEnt = MemClass.readMem<int>(val.gameModule + dwEntityList + ((weapon & 0xFFF) - 1) * 0x10);
				int id = MemClass.readMem<int>(weaponEnt + m_iItemDefinitionIndex);
				aimAt(val.closest);
				
				//unsigned char moveType = MemClass.readMem<MoveType_t>(val.localPlayer + m_MoveType);
				//cout << (moveType == MOVETYPE_WALK)  << endl;
				if ((id == weapon_awp or id == weapon_ssg08) )
				{
					int delay = 0;
					if (id == weapon_awp)
					{
						delay = 150;
					}
					else {
						delay = 90;
					
					}
					if (delta > delay)
					{
						isSniper = false;
					}
					else {
						isSniper = true;
					}
					
					
				}

				if (fired == 0 and val.firstShoot and !isSniper)
				{
					//if (ticks == -1)
					//{
						//Sleep(10);
					//}
					//else
					//{
					//	Sleep(200);
				//	}
						//cout << delta << endl;
						LeftClick();
						fired += 1;
				}

			}
			else
			{

				val.closest = 0;
				val.closestAngle = 100000000000.0f;
				findClosest();
				aimAt(val.closest);

			}






		}
		else
		{

			fired = 0;

		}




		Sleep(1);
	}
}





GlowStruct SetGlowColor(GlowStruct Glow, uintptr_t entity)
{
	bool defusing = MemClass.readMem<bool>(entity + m_bIsDefusing);
	if (defusing)
	{
		Glow.red = 1.0f;
		Glow.green = 1.0f;
		Glow.blue = 1.0f;
	}
	else
	{
		int health = MemClass.readMem<int>(entity + m_iHealth);
		Glow.red = health * -0.01 + 1;
		Glow.green = health * 0.01;
	}
	Glow.alpha = 1.0f;
	Glow.renderWhenOccluded = true;
	Glow.renderWhenUnOccluded = false;
	return Glow;
}
GlowStruct SetGlowColorTeam(GlowStruct Glow, uintptr_t entity)
{
	Glow.blue = 1.0f;
	Glow.alpha = 1.0f;
	Glow.renderWhenOccluded = true;
	Glow.renderWhenUnOccluded = false;
	return Glow;
}

void SetTeamGlow(uintptr_t entity, int glowIndex)
{
	GlowStruct TGlow;
	GlowStruct TGlowNew;
	TGlow = MemClass.readMem<GlowStruct>(val.glowObject + (glowIndex * 0x38));
	TGlowNew = SetGlowColorTeam(TGlow, entity);


	if (TGlowNew.green != TGlow.green || TGlowNew.blue != TGlow.blue || TGlowNew.alpha != TGlow.alpha || TGlowNew.renderWhenOccluded != TGlow.renderWhenOccluded || TGlowNew.renderWhenUnOccluded != TGlow.renderWhenUnOccluded)
	{
		MemClass.writeMem<GlowStruct>(val.glowObject + (glowIndex * 0x38), TGlowNew);
	}
}

void SetEnemyGlow(uintptr_t entity, int glowIndex)
{
	GlowStruct EGlow;
	GlowStruct EGlowNew;
	EGlow = MemClass.readMem<GlowStruct>(val.glowObject + (glowIndex * 0x38));
	EGlowNew = SetGlowColor(EGlow, entity);
	if (EGlowNew.red != EGlow.red || EGlowNew.blue != EGlow.blue || EGlowNew.alpha != EGlow.alpha || EGlowNew.renderWhenOccluded != EGlow.renderWhenOccluded || EGlowNew.renderWhenUnOccluded != EGlow.renderWhenUnOccluded)
	{
		MemClass.writeMem<GlowStruct>(val.glowObject + (glowIndex * 0x38), EGlowNew);
	}

}

void HandleGlow()
{
	val.glowObject = MemClass.readMem<uintptr_t>(val.gameModule + dwGlowObjectManager);


	for (short int i = 0; i <= 64; i++)
	{
		uintptr_t entity = MemClass.readMem<uintptr_t>(val.gameModule + dwEntityList + i * 0x10);
		bool dormant = MemClass.readMem<bool>(entity + m_bDormant);
		if (!dormant)
		{

			int glowIndx = MemClass.readMem<int>(entity + m_iGlowIndex);
			int entityTeam = MemClass.readMem<int>(entity + m_iTeamNum);
			//int myTeam = MemClass.readMem<int>(val.localPlayer + m_iTeamNum);
			//cout << val.myTeam << endl;
			//cout << "they "+ entityTeam << endl;
			if ((val.myTeam == entityTeam) and !val.zone)
			{

				MemClass.writeMem<ClrRender>(entity + m_clrRender, clrTeam);
				SetTeamGlow(entity, glowIndx);
			}
			else
			{

				//	MemClass.writeMem<float>(val.glowObject + ((entity * 0x38) + 0x4), 2);
					//MemClass.writeMem<float>(val.glowObject + ((entity * 0x38) + 0x8), 0);
					//MemClass.writeMem<float>(val.glowObject + ((entity * 0x38) + 0xc), 0);
				//	MemClass.writeMem<float>(val.glowObject + ((entity * 0x38) + 0x10), 1.7);
				//	MemClass.writeMem<bool>(val.glowObject + ((entity * 0x38) + 0x24), true);
				//	MemClass.writeMem<bool>(val.glowObject + ((entity * 0x38) + 0x25), false);
				MemClass.writeMem<bool>(entity + m_bSpotted, true);
				MemClass.writeMem<ClrRender>(entity + m_clrRender, clrEnemy);
				SetEnemyGlow(entity, glowIndx);
			}
		}
	}
}

void SetBrightness()
{
	clrTeam.red = 0;
	clrTeam.blue = 255;
	clrTeam.green = 0;

	clrEnemy.red = 255;
	clrEnemy.blue = 0;
	clrEnemy.green = 0;

	float brightness = 7.0f;

	int ptr = MemClass.readMem<int>(val.engineModule + model_ambient_min);
	int xorptr = *(int*)& brightness ^ ptr;
	MemClass.writeMem<int>(val.engineModule + model_ambient_min, xorptr);
}
void handleBHop()
{
	while (true)
	{
		BYTE  flag = MemClass.readMem<BYTE>(val.localPlayer + m_fFlags);
		if (GetAsyncKeyState(VK_SPACE) && flag & (1 << 0)) {

			MemClass.writeMem<DWORD>(val.gameModule + dwForceJump, 6);
		}
	}
	/*	while (GetAsyncKeyState(VK_SPACE) & 0x8000)
		{
			
			int flag = MemClass.readMem<int>(val.localPlayer + m_fFlags);
		
			if (flag == 256)
			{
				
				MemClass.writeMem<int>(val.gameModule + dwForceJump, 4);
			}
			else
			
			{
				
				MemClass.writeMem<int>(val.gameModule + dwForceJump, 6);
			}
			
			
		}
		
		Sleep(1);
	}*/
}

void handleEspGlow() 
{
	while (true)
	{
		int amount = MemClass.readMem<int>(val.gameModule + dwGlowObjectManager + 0x4);
		//cout << amount << endl;
		for (int i = 1; i <= amount; i++)
		{
			GlowStruct Glow;
			Glow = MemClass.readMem<GlowStruct>(val.glowObject + (i * 0x38));
			uintptr_t entity = MemClass.readMem<uintptr_t>(val.glowObject + (i * 0x38));
			int id = isPlayer(entity);
			//cout << Glow.alpha << endl;
			if ( id != val.classidPlayer and Glow.blue <= 1.f and Glow.blue >= 0.f and Glow.alpha >= 0)
			{
				
				Glow.blue = 1.0f;
				Glow.alpha = 1.0f;
				Glow.renderWhenOccluded = true;
				Glow.renderWhenUnOccluded = false;
				MemClass.writeMem<GlowStruct>(val.glowObject + (i * 0x38), Glow);
				
			}
		}
		Sleep(1);
	}
	
}
int main()
{
	int procID = MemClass.getProcess(L"csgo.exe");
	val.gameModule = MemClass.getModule(procID, L"client_panorama.dll");
	val.engineModule = MemClass.getModule(procID, L"engine.dll");


	if (val.localPlayer == NULL)
		while (val.localPlayer == NULL)
			val.localPlayer = MemClass.readMem<uintptr_t>(val.gameModule + dwLocalPlayer);
	val.myTeam = MemClass.readMem<int>(val.localPlayer + m_iTeamNum);
	SetBrightness();
	//byte check = MemClass.readMem<BYTE>(val.gameModule + force_update_spectator_glow);
	//cout << check << endl;
	MemClass.writeMem<BYTE>(val.gameModule + force_update_spectator_glow, 0xEB); //switch on 0x74

	val.clientState = MemClass.readMem<uintptr_t>(val.engineModule + dwClientState);
	thread aimThread(handleAim);
	thread rcsThread(handleRcs);
	thread bhopThread(handleBHop);
	//thread espThread(handleEspGlow);

	while (true)
	{
		//int localHealth = MemClass.readMem<int>(val.localPlayer + m_iHealth);
		
		if (GetAsyncKeyState(VK_NUMPAD0))
		{
			val.localPlayer = MemClass.readMem<uintptr_t>(val.gameModule + dwLocalPlayer);
			val.myTeam = MemClass.readMem<int>(val.localPlayer + m_iTeamNum);
			val.clientState = MemClass.readMem<uintptr_t>(val.engineModule + dwClientState);
			MemClass.writeMem<BYTE>(val.gameModule + force_update_spectator_glow, 0x74); //switch on 0x74
			Sleep(100);
			MemClass.writeMem<BYTE>(val.gameModule + force_update_spectator_glow, 0xEB);
			val.survivalTeam = MemClass.readMem<int>(val.localPlayer + val.m_nSurvivalTeam);
			cout << "survivalTeam:" << endl;
			cout << val.survivalTeam << endl;
			cout << "First shot:" << endl;
			cout << val.firstShoot << endl;
			cout << "Danger zone:" << endl;
			cout << val.zone << endl;
			

		}
		if (GetAsyncKeyState(VK_NUMPAD1))
		{
			val.firstShoot = !val.firstShoot;
			cout << "First shot:" << endl;
			cout << val.firstShoot << endl;
			
			Sleep(100);
		}
		if (GetAsyncKeyState(VK_NUMPAD2))
		{
			val.zone = !val.zone;
			cout << "Danger zone:" << endl;
			cout << val.zone << endl;
			val.survivalTeam = MemClass.readMem<int>(val.localPlayer + val.m_nSurvivalTeam);
			cout << "survivalTeam:" << endl;
			cout << val.survivalTeam << endl;

			Sleep(100);
		}
		int flashDuration = MemClass.readMem<int>(val.localPlayer + m_flFlashDuration);
		if (flashDuration != 0)
		{
			MemClass.writeMem<int>(val.localPlayer + m_flFlashDuration, 0);
		}
		HandleGlow();

		Sleep(1);
	}
	return 0;
}




